/**
 * kucukdevapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CurriculumLessonModel from '../model/CurriculumLessonModel';
import HTTPValidationError from '../model/HTTPValidationError';
import Message from '../model/Message';

/**
* CurriculumLessons service.
* @module api/CurriculumLessonsApi
* @version 1.0.0
*/
export default class CurriculumLessonsApi {

    /**
    * Constructs a new CurriculumLessonsApi. 
    * @alias module:api/CurriculumLessonsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCurriculumLesson operation.
     * @callback module:api/CurriculumLessonsApi~createCurriculumLessonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurriculumLessonModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Curriculum Lesson
     * Create lesson for a curriculum semester with given universityID, universityDepartmentID, departmentCurriculumID and curriculumSemesterID
     * @param {String} unid 
     * @param {String} depid 
     * @param {String} curid 
     * @param {String} cursid 
     * @param {module:model/CurriculumLessonModel} curriculumLessonModel 
     * @param {module:api/CurriculumLessonsApi~createCurriculumLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurriculumLessonModel}
     */
    createCurriculumLesson(unid, depid, curid, cursid, curriculumLessonModel, callback) {
      let postBody = curriculumLessonModel;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling createCurriculumLesson");
      }
      // verify the required parameter 'depid' is set
      if (depid === undefined || depid === null) {
        throw new Error("Missing the required parameter 'depid' when calling createCurriculumLesson");
      }
      // verify the required parameter 'curid' is set
      if (curid === undefined || curid === null) {
        throw new Error("Missing the required parameter 'curid' when calling createCurriculumLesson");
      }
      // verify the required parameter 'cursid' is set
      if (cursid === undefined || cursid === null) {
        throw new Error("Missing the required parameter 'cursid' when calling createCurriculumLesson");
      }
      // verify the required parameter 'curriculumLessonModel' is set
      if (curriculumLessonModel === undefined || curriculumLessonModel === null) {
        throw new Error("Missing the required parameter 'curriculumLessonModel' when calling createCurriculumLesson");
      }

      let pathParams = {
        'unid': unid,
        'depid': depid,
        'curid': curid,
        'cursid': cursid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CurriculumLessonModel;
      return this.apiClient.callApi(
        '/universities/{unid}/departments/{depid}/curriculums/{curid}/semesters{cursid}/lessons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCurriculumLesson operation.
     * @callback module:api/CurriculumLessonsApi~deleteCurriculumLessonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Curriculum Lesson
     * Delete a university department with given universityID, universityDepartmentID, departmentCurriculumID, curriculumSemesterID and curriculumLessonID
     * @param {String} unid 
     * @param {String} depid 
     * @param {String} curid 
     * @param {String} cursid 
     * @param {String} curlid 
     * @param {module:api/CurriculumLessonsApi~deleteCurriculumLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    deleteCurriculumLesson(unid, depid, curid, cursid, curlid, callback) {
      let postBody = null;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling deleteCurriculumLesson");
      }
      // verify the required parameter 'depid' is set
      if (depid === undefined || depid === null) {
        throw new Error("Missing the required parameter 'depid' when calling deleteCurriculumLesson");
      }
      // verify the required parameter 'curid' is set
      if (curid === undefined || curid === null) {
        throw new Error("Missing the required parameter 'curid' when calling deleteCurriculumLesson");
      }
      // verify the required parameter 'cursid' is set
      if (cursid === undefined || cursid === null) {
        throw new Error("Missing the required parameter 'cursid' when calling deleteCurriculumLesson");
      }
      // verify the required parameter 'curlid' is set
      if (curlid === undefined || curlid === null) {
        throw new Error("Missing the required parameter 'curlid' when calling deleteCurriculumLesson");
      }

      let pathParams = {
        'unid': unid,
        'depid': depid,
        'curid': curid,
        'cursid': cursid,
        'curlid': curlid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/universities/{unid}/departments/{depid}/curriculums/{curid}/semesters/{cursid}/lessons/{curlid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSingleCurriculumLesson operation.
     * @callback module:api/CurriculumLessonsApi~getSingleCurriculumLessonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurriculumLessonModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Curriculum Lesson
     * Get a single semester of a curriculum with given universityID, universityDepartmentID, departmentCurriculumID, curriculumSemesterID and curriculumLessonID
     * @param {String} unid 
     * @param {String} depid 
     * @param {String} curid 
     * @param {String} cursid 
     * @param {String} curlid 
     * @param {module:api/CurriculumLessonsApi~getSingleCurriculumLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurriculumLessonModel}
     */
    getSingleCurriculumLesson(unid, depid, curid, cursid, curlid, callback) {
      let postBody = null;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling getSingleCurriculumLesson");
      }
      // verify the required parameter 'depid' is set
      if (depid === undefined || depid === null) {
        throw new Error("Missing the required parameter 'depid' when calling getSingleCurriculumLesson");
      }
      // verify the required parameter 'curid' is set
      if (curid === undefined || curid === null) {
        throw new Error("Missing the required parameter 'curid' when calling getSingleCurriculumLesson");
      }
      // verify the required parameter 'cursid' is set
      if (cursid === undefined || cursid === null) {
        throw new Error("Missing the required parameter 'cursid' when calling getSingleCurriculumLesson");
      }
      // verify the required parameter 'curlid' is set
      if (curlid === undefined || curlid === null) {
        throw new Error("Missing the required parameter 'curlid' when calling getSingleCurriculumLesson");
      }

      let pathParams = {
        'unid': unid,
        'depid': depid,
        'curid': curid,
        'cursid': cursid,
        'curlid': curlid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CurriculumLessonModel;
      return this.apiClient.callApi(
        '/universities/{unid}/departments/{depid}/curriculums/{curid}/semesters/{cursid}/lessons/{curlid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCurriculumLessons operation.
     * @callback module:api/CurriculumLessonsApi~listCurriculumLessonsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurriculumLessonModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Curriculum Lessons
     * list all lessons of a curriculum semester of a department with given universityID, universityDepartmentID, departmentCurriculumID and curriculumSemesterID
     * @param {String} unid 
     * @param {String} depid 
     * @param {String} curid 
     * @param {String} cursid 
     * @param {module:api/CurriculumLessonsApi~listCurriculumLessonsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurriculumLessonModel>}
     */
    listCurriculumLessons(unid, depid, curid, cursid, callback) {
      let postBody = null;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling listCurriculumLessons");
      }
      // verify the required parameter 'depid' is set
      if (depid === undefined || depid === null) {
        throw new Error("Missing the required parameter 'depid' when calling listCurriculumLessons");
      }
      // verify the required parameter 'curid' is set
      if (curid === undefined || curid === null) {
        throw new Error("Missing the required parameter 'curid' when calling listCurriculumLessons");
      }
      // verify the required parameter 'cursid' is set
      if (cursid === undefined || cursid === null) {
        throw new Error("Missing the required parameter 'cursid' when calling listCurriculumLessons");
      }

      let pathParams = {
        'unid': unid,
        'depid': depid,
        'curid': curid,
        'cursid': cursid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CurriculumLessonModel];
      return this.apiClient.callApi(
        '/universities/{unid}/departments/{depid}/curriculums/{curid}/semesters{cursid}/lessons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCurriculumLesson operation.
     * @callback module:api/CurriculumLessonsApi~updateCurriculumLessonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Curriculum Lesson
     * Update semester of a curriculum with given universityID, universityDepartmentID, departmentCurriculumID, curriculumSemesterID and curriculumLessonID
     * @param {String} unid 
     * @param {String} depid 
     * @param {String} curid 
     * @param {String} cursid 
     * @param {String} curlid 
     * @param {module:model/CurriculumLessonModel} curriculumLessonModel 
     * @param {module:api/CurriculumLessonsApi~updateCurriculumLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    updateCurriculumLesson(unid, depid, curid, cursid, curlid, curriculumLessonModel, callback) {
      let postBody = curriculumLessonModel;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling updateCurriculumLesson");
      }
      // verify the required parameter 'depid' is set
      if (depid === undefined || depid === null) {
        throw new Error("Missing the required parameter 'depid' when calling updateCurriculumLesson");
      }
      // verify the required parameter 'curid' is set
      if (curid === undefined || curid === null) {
        throw new Error("Missing the required parameter 'curid' when calling updateCurriculumLesson");
      }
      // verify the required parameter 'cursid' is set
      if (cursid === undefined || cursid === null) {
        throw new Error("Missing the required parameter 'cursid' when calling updateCurriculumLesson");
      }
      // verify the required parameter 'curlid' is set
      if (curlid === undefined || curlid === null) {
        throw new Error("Missing the required parameter 'curlid' when calling updateCurriculumLesson");
      }
      // verify the required parameter 'curriculumLessonModel' is set
      if (curriculumLessonModel === undefined || curriculumLessonModel === null) {
        throw new Error("Missing the required parameter 'curriculumLessonModel' when calling updateCurriculumLesson");
      }

      let pathParams = {
        'unid': unid,
        'depid': depid,
        'curid': curid,
        'cursid': cursid,
        'curlid': curlid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/universities/{unid}/departments/{depid}/curriculums/{curid}/semesters/{cursid}/lessons/{curlid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
