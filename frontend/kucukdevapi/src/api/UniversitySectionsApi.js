/**
 * kucukdevapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import Message from '../model/Message';
import UniversitySectionModel from '../model/UniversitySectionModel';

/**
* UniversitySections service.
* @module api/UniversitySectionsApi
* @version 1.0.0
*/
export default class UniversitySectionsApi {

    /**
    * Constructs a new UniversitySectionsApi. 
    * @alias module:api/UniversitySectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteLessonSection operation.
     * @callback module:api/UniversitySectionsApi~deleteLessonSectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Lesson Section
     * Delete a lesson section with given universityID, universitySemesterID, universityLessonID and sectionID
     * @param {String} unid 
     * @param {String} unisid 
     * @param {String} unilid 
     * @param {String} secid 
     * @param {module:api/UniversitySectionsApi~deleteLessonSectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    deleteLessonSection(unid, unisid, unilid, secid, callback) {
      let postBody = null;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling deleteLessonSection");
      }
      // verify the required parameter 'unisid' is set
      if (unisid === undefined || unisid === null) {
        throw new Error("Missing the required parameter 'unisid' when calling deleteLessonSection");
      }
      // verify the required parameter 'unilid' is set
      if (unilid === undefined || unilid === null) {
        throw new Error("Missing the required parameter 'unilid' when calling deleteLessonSection");
      }
      // verify the required parameter 'secid' is set
      if (secid === undefined || secid === null) {
        throw new Error("Missing the required parameter 'secid' when calling deleteLessonSection");
      }

      let pathParams = {
        'unid': unid,
        'unisid': unisid,
        'unilid': unilid,
        'secid': secid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/universities/{unid}/semesters/{unisid}/lessons/{unilid}/sections/{secid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLessonSection operation.
     * @callback module:api/UniversitySectionsApi~updateLessonSectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Lesson Section
     * Update section of a lesson with given universityID, universitySemesterID, universityLessonID and sectionID
     * @param {String} unid 
     * @param {String} unisid 
     * @param {String} unilid 
     * @param {String} secid 
     * @param {module:model/UniversitySectionModel} universitySectionModel 
     * @param {module:api/UniversitySectionsApi~updateLessonSectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    updateLessonSection(unid, unisid, unilid, secid, universitySectionModel, callback) {
      let postBody = universitySectionModel;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling updateLessonSection");
      }
      // verify the required parameter 'unisid' is set
      if (unisid === undefined || unisid === null) {
        throw new Error("Missing the required parameter 'unisid' when calling updateLessonSection");
      }
      // verify the required parameter 'unilid' is set
      if (unilid === undefined || unilid === null) {
        throw new Error("Missing the required parameter 'unilid' when calling updateLessonSection");
      }
      // verify the required parameter 'secid' is set
      if (secid === undefined || secid === null) {
        throw new Error("Missing the required parameter 'secid' when calling updateLessonSection");
      }
      // verify the required parameter 'universitySectionModel' is set
      if (universitySectionModel === undefined || universitySectionModel === null) {
        throw new Error("Missing the required parameter 'universitySectionModel' when calling updateLessonSection");
      }

      let pathParams = {
        'unid': unid,
        'unisid': unisid,
        'unilid': unilid,
        'secid': secid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/universities/{unid}/semesters/{unisid}/lessons/{unilid}/sections/{secid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
