/**
 * kucukdevapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CurriculumSemesterModel from '../model/CurriculumSemesterModel';
import HTTPValidationError from '../model/HTTPValidationError';
import Message from '../model/Message';
import MessageCreate from '../model/MessageCreate';

/**
* CurriculumSemesters service.
* @module api/CurriculumSemestersApi
* @version 1.0.0
*/
export default class CurriculumSemestersApi {

    /**
    * Constructs a new CurriculumSemestersApi. 
    * @alias module:api/CurriculumSemestersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCurriculumSemester operation.
     * @callback module:api/CurriculumSemestersApi~createCurriculumSemesterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Curriculum Semester
     * Create semester for a curriculum with given universityID, universityDepartmentID and departmentCurriculumID
     * @param {String} unid 
     * @param {String} depid 
     * @param {String} curid 
     * @param {module:model/CurriculumSemesterModel} curriculumSemesterModel 
     * @param {module:api/CurriculumSemestersApi~createCurriculumSemesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageCreate}
     */
    createCurriculumSemester(unid, depid, curid, curriculumSemesterModel, callback) {
      let postBody = curriculumSemesterModel;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling createCurriculumSemester");
      }
      // verify the required parameter 'depid' is set
      if (depid === undefined || depid === null) {
        throw new Error("Missing the required parameter 'depid' when calling createCurriculumSemester");
      }
      // verify the required parameter 'curid' is set
      if (curid === undefined || curid === null) {
        throw new Error("Missing the required parameter 'curid' when calling createCurriculumSemester");
      }
      // verify the required parameter 'curriculumSemesterModel' is set
      if (curriculumSemesterModel === undefined || curriculumSemesterModel === null) {
        throw new Error("Missing the required parameter 'curriculumSemesterModel' when calling createCurriculumSemester");
      }

      let pathParams = {
        'unid': unid,
        'depid': depid,
        'curid': curid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MessageCreate;
      return this.apiClient.callApi(
        '/universities/{unid}/departments/{depid}/curriculums/{curid}/semesters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCurriculumSemester operation.
     * @callback module:api/CurriculumSemestersApi~deleteCurriculumSemesterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Curriculum Semester
     * Delete a university department with given universityID, universityDepartmentID, departmentCurriculumID and curriculumSemesterID
     * @param {String} unid 
     * @param {String} depid 
     * @param {String} curid 
     * @param {String} cursid 
     * @param {module:api/CurriculumSemestersApi~deleteCurriculumSemesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    deleteCurriculumSemester(unid, depid, curid, cursid, callback) {
      let postBody = null;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling deleteCurriculumSemester");
      }
      // verify the required parameter 'depid' is set
      if (depid === undefined || depid === null) {
        throw new Error("Missing the required parameter 'depid' when calling deleteCurriculumSemester");
      }
      // verify the required parameter 'curid' is set
      if (curid === undefined || curid === null) {
        throw new Error("Missing the required parameter 'curid' when calling deleteCurriculumSemester");
      }
      // verify the required parameter 'cursid' is set
      if (cursid === undefined || cursid === null) {
        throw new Error("Missing the required parameter 'cursid' when calling deleteCurriculumSemester");
      }

      let pathParams = {
        'unid': unid,
        'depid': depid,
        'curid': curid,
        'cursid': cursid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/universities/{unid}/departments/{depid}/curriculums/{curid}/semesters/{cursid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSingleCurriculumSemester operation.
     * @callback module:api/CurriculumSemestersApi~getSingleCurriculumSemesterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurriculumSemesterModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Curriculum Semester
     * Get a single semester of a curriculum with given universityID, universityDepartmentID, departmentCurriculumID and curriculumSemesterID
     * @param {String} unid 
     * @param {String} depid 
     * @param {String} curid 
     * @param {String} cursid 
     * @param {module:api/CurriculumSemestersApi~getSingleCurriculumSemesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurriculumSemesterModel}
     */
    getSingleCurriculumSemester(unid, depid, curid, cursid, callback) {
      let postBody = null;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling getSingleCurriculumSemester");
      }
      // verify the required parameter 'depid' is set
      if (depid === undefined || depid === null) {
        throw new Error("Missing the required parameter 'depid' when calling getSingleCurriculumSemester");
      }
      // verify the required parameter 'curid' is set
      if (curid === undefined || curid === null) {
        throw new Error("Missing the required parameter 'curid' when calling getSingleCurriculumSemester");
      }
      // verify the required parameter 'cursid' is set
      if (cursid === undefined || cursid === null) {
        throw new Error("Missing the required parameter 'cursid' when calling getSingleCurriculumSemester");
      }

      let pathParams = {
        'unid': unid,
        'depid': depid,
        'curid': curid,
        'cursid': cursid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CurriculumSemesterModel;
      return this.apiClient.callApi(
        '/universities/{unid}/departments/{depid}/curriculums/{curid}/semesters/{cursid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCurriculumSemesters operation.
     * @callback module:api/CurriculumSemestersApi~listCurriculumSemestersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurriculumSemesterModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Curriculum Semesters
     * list all semesters of a curriculum of a department with given universityID, universityDepartmentID and departmentCurriculumID
     * @param {String} unid 
     * @param {String} depid 
     * @param {String} curid 
     * @param {module:api/CurriculumSemestersApi~listCurriculumSemestersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurriculumSemesterModel>}
     */
    listCurriculumSemesters(unid, depid, curid, callback) {
      let postBody = null;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling listCurriculumSemesters");
      }
      // verify the required parameter 'depid' is set
      if (depid === undefined || depid === null) {
        throw new Error("Missing the required parameter 'depid' when calling listCurriculumSemesters");
      }
      // verify the required parameter 'curid' is set
      if (curid === undefined || curid === null) {
        throw new Error("Missing the required parameter 'curid' when calling listCurriculumSemesters");
      }

      let pathParams = {
        'unid': unid,
        'depid': depid,
        'curid': curid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CurriculumSemesterModel];
      return this.apiClient.callApi(
        '/universities/{unid}/departments/{depid}/curriculums/{curid}/semesters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCurriculumSemester operation.
     * @callback module:api/CurriculumSemestersApi~updateCurriculumSemesterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Curriculum Semester
     * Update semester of a curriculum with given universityID, universityDepartmentID, departmentCurriculumID and curriculumSemesterID
     * @param {String} unid 
     * @param {String} depid 
     * @param {String} curid 
     * @param {String} cursid 
     * @param {module:model/CurriculumSemesterModel} curriculumSemesterModel 
     * @param {module:api/CurriculumSemestersApi~updateCurriculumSemesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    updateCurriculumSemester(unid, depid, curid, cursid, curriculumSemesterModel, callback) {
      let postBody = curriculumSemesterModel;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling updateCurriculumSemester");
      }
      // verify the required parameter 'depid' is set
      if (depid === undefined || depid === null) {
        throw new Error("Missing the required parameter 'depid' when calling updateCurriculumSemester");
      }
      // verify the required parameter 'curid' is set
      if (curid === undefined || curid === null) {
        throw new Error("Missing the required parameter 'curid' when calling updateCurriculumSemester");
      }
      // verify the required parameter 'cursid' is set
      if (cursid === undefined || cursid === null) {
        throw new Error("Missing the required parameter 'cursid' when calling updateCurriculumSemester");
      }
      // verify the required parameter 'curriculumSemesterModel' is set
      if (curriculumSemesterModel === undefined || curriculumSemesterModel === null) {
        throw new Error("Missing the required parameter 'curriculumSemesterModel' when calling updateCurriculumSemester");
      }

      let pathParams = {
        'unid': unid,
        'depid': depid,
        'curid': curid,
        'cursid': cursid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/universities/{unid}/departments/{depid}/curriculums/{curid}/semesters/{cursid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
