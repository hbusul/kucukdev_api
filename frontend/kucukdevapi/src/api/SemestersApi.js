/**
 * kucukdevapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import Message from '../model/Message';
import SemesterAPIModel from '../model/SemesterAPIModel';
import UpdateUserSemesterModel from '../model/UpdateUserSemesterModel';
import UserSemesterModel from '../model/UserSemesterModel';

/**
* Semesters service.
* @module api/SemestersApi
* @version 1.0.0
*/
export default class SemestersApi {

    /**
    * Constructs a new SemestersApi. 
    * @alias module:api/SemestersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSemester operation.
     * @callback module:api/SemestersApi~createSemesterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SemesterAPIModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Semester
     * Create a semester for a user with given userID
     * @param {String} uid 
     * @param {module:model/UserSemesterModel} userSemesterModel 
     * @param {module:api/SemestersApi~createSemesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SemesterAPIModel>}
     */
    createSemester(uid, userSemesterModel, callback) {
      let postBody = userSemesterModel;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling createSemester");
      }
      // verify the required parameter 'userSemesterModel' is set
      if (userSemesterModel === undefined || userSemesterModel === null) {
        throw new Error("Missing the required parameter 'userSemesterModel' when calling createSemester");
      }

      let pathParams = {
        'uid': uid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SemesterAPIModel];
      return this.apiClient.callApi(
        '/users/{uid}/semesters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSemester operation.
     * @callback module:api/SemestersApi~deleteSemesterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Semester
     * Delete a semester with given userID and semesterID
     * @param {String} uid 
     * @param {String} sid 
     * @param {module:api/SemestersApi~deleteSemesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    deleteSemester(uid, sid, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling deleteSemester");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteSemester");
      }

      let pathParams = {
        'uid': uid,
        'sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/users/{uid}/semesters/{sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSingleSemester operation.
     * @callback module:api/SemestersApi~getSingleSemesterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SemesterAPIModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Semester
     * Get a single semester with given userID and semesterID
     * @param {String} uid 
     * @param {String} sid 
     * @param {module:api/SemestersApi~getSingleSemesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SemesterAPIModel}
     */
    getSingleSemester(uid, sid, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling getSingleSemester");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling getSingleSemester");
      }

      let pathParams = {
        'uid': uid,
        'sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SemesterAPIModel;
      return this.apiClient.callApi(
        '/users/{uid}/semesters/{sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSemestersOfUser operation.
     * @callback module:api/SemestersApi~listSemestersOfUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SemesterAPIModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Semesters
     * list all semesters of a user with given userID
     * @param {String} uid 
     * @param {module:api/SemestersApi~listSemestersOfUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SemesterAPIModel>}
     */
    listSemestersOfUser(uid, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling listSemestersOfUser");
      }

      let pathParams = {
        'uid': uid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SemesterAPIModel];
      return this.apiClient.callApi(
        '/users/{uid}/semesters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSemester operation.
     * @callback module:api/SemestersApi~updateSemesterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Semester
     * Update a semester with given userID and semesterID
     * @param {String} uid 
     * @param {String} sid 
     * @param {module:model/UpdateUserSemesterModel} updateUserSemesterModel 
     * @param {module:api/SemestersApi~updateSemesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    updateSemester(uid, sid, updateUserSemesterModel, callback) {
      let postBody = updateUserSemesterModel;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling updateSemester");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateSemester");
      }
      // verify the required parameter 'updateUserSemesterModel' is set
      if (updateUserSemesterModel === undefined || updateUserSemesterModel === null) {
        throw new Error("Missing the required parameter 'updateUserSemesterModel' when calling updateSemester");
      }

      let pathParams = {
        'uid': uid,
        'sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/users/{uid}/semesters/{sid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
