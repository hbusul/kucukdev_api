/**
 * kucukdevapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import LessonAPIModel from '../model/LessonAPIModel';
import LessonAbsenceModel from '../model/LessonAbsenceModel';
import LessonModel from '../model/LessonModel';
import Message from '../model/Message';
import UpdateLessonModel from '../model/UpdateLessonModel';

/**
* Lessons service.
* @module api/LessonsApi
* @version 1.0.0
*/
export default class LessonsApi {

    /**
    * Constructs a new LessonsApi. 
    * @alias module:api/LessonsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAbsence operation.
     * @callback module:api/LessonsApi~createAbsenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Absence
     * Create an absence for a lesson with given userID, semesterID and lessonID
     * @param {String} uid 
     * @param {String} sid 
     * @param {String} lid 
     * @param {module:model/LessonAbsenceModel} lessonAbsenceModel 
     * @param {module:api/LessonsApi~createAbsenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    createAbsence(uid, sid, lid, lessonAbsenceModel, callback) {
      let postBody = lessonAbsenceModel;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling createAbsence");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling createAbsence");
      }
      // verify the required parameter 'lid' is set
      if (lid === undefined || lid === null) {
        throw new Error("Missing the required parameter 'lid' when calling createAbsence");
      }
      // verify the required parameter 'lessonAbsenceModel' is set
      if (lessonAbsenceModel === undefined || lessonAbsenceModel === null) {
        throw new Error("Missing the required parameter 'lessonAbsenceModel' when calling createAbsence");
      }

      let pathParams = {
        'uid': uid,
        'sid': sid,
        'lid': lid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/users/{uid}/semesters/{sid}/lessons/{lid}/absences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLesson operation.
     * @callback module:api/LessonsApi~createLessonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Lesson
     * Create a lessons for a semester with given userID, semesterID
     * @param {String} uid 
     * @param {String} sid 
     * @param {module:model/LessonModel} lessonModel 
     * @param {module:api/LessonsApi~createLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    createLesson(uid, sid, lessonModel, callback) {
      let postBody = lessonModel;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling createLesson");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling createLesson");
      }
      // verify the required parameter 'lessonModel' is set
      if (lessonModel === undefined || lessonModel === null) {
        throw new Error("Missing the required parameter 'lessonModel' when calling createLesson");
      }

      let pathParams = {
        'uid': uid,
        'sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/users/{uid}/semesters/{sid}/lessons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAbsence operation.
     * @callback module:api/LessonsApi~deleteAbsenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Absence
     * Delete an absence from a lesson with given userID, semesterID and lessonID
     * @param {String} uid 
     * @param {String} sid 
     * @param {String} lid 
     * @param {module:model/LessonAbsenceModel} lessonAbsenceModel 
     * @param {module:api/LessonsApi~deleteAbsenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    deleteAbsence(uid, sid, lid, lessonAbsenceModel, callback) {
      let postBody = lessonAbsenceModel;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling deleteAbsence");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteAbsence");
      }
      // verify the required parameter 'lid' is set
      if (lid === undefined || lid === null) {
        throw new Error("Missing the required parameter 'lid' when calling deleteAbsence");
      }
      // verify the required parameter 'lessonAbsenceModel' is set
      if (lessonAbsenceModel === undefined || lessonAbsenceModel === null) {
        throw new Error("Missing the required parameter 'lessonAbsenceModel' when calling deleteAbsence");
      }

      let pathParams = {
        'uid': uid,
        'sid': sid,
        'lid': lid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/users/{uid}/semesters/{sid}/lessons/{lid}/absences', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLesson operation.
     * @callback module:api/LessonsApi~deleteLessonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Lesson
     * Delete a lesson with given userID, semesterID and lessonID
     * @param {String} uid 
     * @param {String} sid 
     * @param {String} lid 
     * @param {module:api/LessonsApi~deleteLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    deleteLesson(uid, sid, lid, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling deleteLesson");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteLesson");
      }
      // verify the required parameter 'lid' is set
      if (lid === undefined || lid === null) {
        throw new Error("Missing the required parameter 'lid' when calling deleteLesson");
      }

      let pathParams = {
        'uid': uid,
        'sid': sid,
        'lid': lid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/users/{uid}/semesters/{sid}/lessons/{lid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSingleLesson operation.
     * @callback module:api/LessonsApi~getSingleLessonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LessonAPIModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Lesson
     * Get a single lesson with given userID, semesterID and lessonID
     * @param {String} uid 
     * @param {String} sid 
     * @param {String} lid 
     * @param {module:api/LessonsApi~getSingleLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LessonAPIModel}
     */
    getSingleLesson(uid, sid, lid, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling getSingleLesson");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling getSingleLesson");
      }
      // verify the required parameter 'lid' is set
      if (lid === undefined || lid === null) {
        throw new Error("Missing the required parameter 'lid' when calling getSingleLesson");
      }

      let pathParams = {
        'uid': uid,
        'sid': sid,
        'lid': lid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LessonAPIModel;
      return this.apiClient.callApi(
        '/users/{uid}/semesters/{sid}/lessons/{lid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLessonsOfSemester operation.
     * @callback module:api/LessonsApi~listLessonsOfSemesterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LessonAPIModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Lessons
     * List all lessons of a semester with given userID, semesterID
     * @param {String} uid 
     * @param {String} sid 
     * @param {module:api/LessonsApi~listLessonsOfSemesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LessonAPIModel>}
     */
    listLessonsOfSemester(uid, sid, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling listLessonsOfSemester");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling listLessonsOfSemester");
      }

      let pathParams = {
        'uid': uid,
        'sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LessonAPIModel];
      return this.apiClient.callApi(
        '/users/{uid}/semesters/{sid}/lessons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLesson operation.
     * @callback module:api/LessonsApi~updateLessonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Lesson
     * Update a lesson with given userID, semesterID and lessonID
     * @param {String} uid 
     * @param {String} sid 
     * @param {String} lid 
     * @param {module:model/UpdateLessonModel} updateLessonModel 
     * @param {module:api/LessonsApi~updateLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    updateLesson(uid, sid, lid, updateLessonModel, callback) {
      let postBody = updateLessonModel;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling updateLesson");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateLesson");
      }
      // verify the required parameter 'lid' is set
      if (lid === undefined || lid === null) {
        throw new Error("Missing the required parameter 'lid' when calling updateLesson");
      }
      // verify the required parameter 'updateLessonModel' is set
      if (updateLessonModel === undefined || updateLessonModel === null) {
        throw new Error("Missing the required parameter 'updateLessonModel' when calling updateLesson");
      }

      let pathParams = {
        'uid': uid,
        'sid': sid,
        'lid': lid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/users/{uid}/semesters/{sid}/lessons/{lid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
