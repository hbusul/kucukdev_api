/**
 * kucukdevapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import Message from '../model/Message';
import UpdateEntranceYearModel from '../model/UpdateEntranceYearModel';
import UpdatePasswordModel from '../model/UpdatePasswordModel';
import UpdateSemesterModel from '../model/UpdateSemesterModel';
import UpdateUniversityModel from '../model/UpdateUniversityModel';
import UserAPIModel from '../model/UserAPIModel';
import UserModel from '../model/UserModel';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UsersApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAPIModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User
     * Create a user
     * @param {module:model/UserModel} userModel 
     * @param {module:api/UsersApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAPIModel}
     */
    createUser(userModel, callback) {
      let postBody = userModel;
      // verify the required parameter 'userModel' is set
      if (userModel === undefined || userModel === null) {
        throw new Error("Missing the required parameter 'userModel' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserAPIModel;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UsersApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAPIModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User
     * Delete a user with given userID
     * @param {String} uid 
     * @param {module:api/UsersApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAPIModel}
     */
    deleteUser(uid, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling deleteUser");
      }

      let pathParams = {
        'uid': uid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserAPIModel;
      return this.apiClient.callApi(
        '/users/{uid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentUser operation.
     * @callback module:api/UsersApi~getCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAPIModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Current
     * @param {module:api/UsersApi~getCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAPIModel}
     */
    getCurrentUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserAPIModel;
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSingleUser operation.
     * @callback module:api/UsersApi~getSingleUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAPIModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show User
     * Get a single user with given userID
     * @param {String} uid 
     * @param {module:api/UsersApi~getSingleUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAPIModel}
     */
    getSingleUser(uid, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling getSingleUser");
      }

      let pathParams = {
        'uid': uid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserAPIModel;
      return this.apiClient.callApi(
        '/users/{uid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCurrentSemester operation.
     * @callback module:api/UsersApi~updateCurrentSemesterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Current Semester
     * Update current semester ID of a user with given userID
     * @param {String} uid 
     * @param {module:model/UpdateSemesterModel} updateSemesterModel 
     * @param {module:api/UsersApi~updateCurrentSemesterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    updateCurrentSemester(uid, updateSemesterModel, callback) {
      let postBody = updateSemesterModel;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling updateCurrentSemester");
      }
      // verify the required parameter 'updateSemesterModel' is set
      if (updateSemesterModel === undefined || updateSemesterModel === null) {
        throw new Error("Missing the required parameter 'updateSemesterModel' when calling updateCurrentSemester");
      }

      let pathParams = {
        'uid': uid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/users/{uid}/current-semester', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCurrentUniversity operation.
     * @callback module:api/UsersApi~updateCurrentUniversityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Current University
     * Update current university ID of a user with given userID
     * @param {String} uid 
     * @param {module:model/UpdateUniversityModel} updateUniversityModel 
     * @param {module:api/UsersApi~updateCurrentUniversityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    updateCurrentUniversity(uid, updateUniversityModel, callback) {
      let postBody = updateUniversityModel;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling updateCurrentUniversity");
      }
      // verify the required parameter 'updateUniversityModel' is set
      if (updateUniversityModel === undefined || updateUniversityModel === null) {
        throw new Error("Missing the required parameter 'updateUniversityModel' when calling updateCurrentUniversity");
      }

      let pathParams = {
        'uid': uid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/users/{uid}/current-university', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntranceyear operation.
     * @callback module:api/UsersApi~updateEntranceyearCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Entrance Year
     * Update entrance year of a user with given userID
     * @param {String} uid 
     * @param {module:model/UpdateEntranceYearModel} updateEntranceYearModel 
     * @param {module:api/UsersApi~updateEntranceyearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    updateEntranceyear(uid, updateEntranceYearModel, callback) {
      let postBody = updateEntranceYearModel;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling updateEntranceyear");
      }
      // verify the required parameter 'updateEntranceYearModel' is set
      if (updateEntranceYearModel === undefined || updateEntranceYearModel === null) {
        throw new Error("Missing the required parameter 'updateEntranceYearModel' when calling updateEntranceyear");
      }

      let pathParams = {
        'uid': uid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/users/{uid}/entrance-year', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePassword operation.
     * @callback module:api/UsersApi~updatePasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Password
     * Update password of a user with given userID
     * @param {String} uid 
     * @param {module:model/UpdatePasswordModel} updatePasswordModel 
     * @param {module:api/UsersApi~updatePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    updatePassword(uid, updatePasswordModel, callback) {
      let postBody = updatePasswordModel;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling updatePassword");
      }
      // verify the required parameter 'updatePasswordModel' is set
      if (updatePasswordModel === undefined || updatePasswordModel === null) {
        throw new Error("Missing the required parameter 'updatePasswordModel' when calling updatePassword");
      }

      let pathParams = {
        'uid': uid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/users/{uid}/change-password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
