/**
 * kucukdevapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import Message from '../model/Message';
import UniversityDepartmentModel from '../model/UniversityDepartmentModel';

/**
* Departments service.
* @module api/DepartmentsApi
* @version 1.0.0
*/
export default class DepartmentsApi {

    /**
    * Constructs a new DepartmentsApi. 
    * @alias module:api/DepartmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUniversityDepartment operation.
     * @callback module:api/DepartmentsApi~createUniversityDepartmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UniversityDepartmentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create University Department
     * Create department for a university with given universityID
     * @param {String} unid 
     * @param {module:model/UniversityDepartmentModel} universityDepartmentModel 
     * @param {module:api/DepartmentsApi~createUniversityDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UniversityDepartmentModel}
     */
    createUniversityDepartment(unid, universityDepartmentModel, callback) {
      let postBody = universityDepartmentModel;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling createUniversityDepartment");
      }
      // verify the required parameter 'universityDepartmentModel' is set
      if (universityDepartmentModel === undefined || universityDepartmentModel === null) {
        throw new Error("Missing the required parameter 'universityDepartmentModel' when calling createUniversityDepartment");
      }

      let pathParams = {
        'unid': unid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UniversityDepartmentModel;
      return this.apiClient.callApi(
        '/universities/{unid}/departments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUniversityDepartment operation.
     * @callback module:api/DepartmentsApi~deleteUniversityDepartmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete University Department
     * Delete a university department with given universityID and universitySemesterID
     * @param {String} unid 
     * @param {String} depid 
     * @param {module:api/DepartmentsApi~deleteUniversityDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    deleteUniversityDepartment(unid, depid, callback) {
      let postBody = null;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling deleteUniversityDepartment");
      }
      // verify the required parameter 'depid' is set
      if (depid === undefined || depid === null) {
        throw new Error("Missing the required parameter 'depid' when calling deleteUniversityDepartment");
      }

      let pathParams = {
        'unid': unid,
        'depid': depid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/universities/{unid}/departments/{depid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSingleUniversityDepartment operation.
     * @callback module:api/DepartmentsApi~getSingleUniversityDepartmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UniversityDepartmentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show University Department
     * Get a single semester of a university with given universityID and universityDepartmentID
     * @param {String} unid 
     * @param {String} depid 
     * @param {module:api/DepartmentsApi~getSingleUniversityDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UniversityDepartmentModel}
     */
    getSingleUniversityDepartment(unid, depid, callback) {
      let postBody = null;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling getSingleUniversityDepartment");
      }
      // verify the required parameter 'depid' is set
      if (depid === undefined || depid === null) {
        throw new Error("Missing the required parameter 'depid' when calling getSingleUniversityDepartment");
      }

      let pathParams = {
        'unid': unid,
        'depid': depid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UniversityDepartmentModel;
      return this.apiClient.callApi(
        '/universities/{unid}/departments/{depid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUniversityDepartments operation.
     * @callback module:api/DepartmentsApi~listUniversityDepartmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniversityDepartmentModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List University Departments
     * list all departments of a university with given universityID
     * @param {String} unid 
     * @param {module:api/DepartmentsApi~listUniversityDepartmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniversityDepartmentModel>}
     */
    listUniversityDepartments(unid, callback) {
      let postBody = null;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling listUniversityDepartments");
      }

      let pathParams = {
        'unid': unid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UniversityDepartmentModel];
      return this.apiClient.callApi(
        '/universities/{unid}/departments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUniversityDepartment operation.
     * @callback module:api/DepartmentsApi~updateUniversityDepartmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update University Department
     * Update department of a university with given universityID and universityDepartmentID
     * @param {String} unid 
     * @param {String} depid 
     * @param {module:model/UniversityDepartmentModel} universityDepartmentModel 
     * @param {module:api/DepartmentsApi~updateUniversityDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    updateUniversityDepartment(unid, depid, universityDepartmentModel, callback) {
      let postBody = universityDepartmentModel;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling updateUniversityDepartment");
      }
      // verify the required parameter 'depid' is set
      if (depid === undefined || depid === null) {
        throw new Error("Missing the required parameter 'depid' when calling updateUniversityDepartment");
      }
      // verify the required parameter 'universityDepartmentModel' is set
      if (universityDepartmentModel === undefined || universityDepartmentModel === null) {
        throw new Error("Missing the required parameter 'universityDepartmentModel' when calling updateUniversityDepartment");
      }

      let pathParams = {
        'unid': unid,
        'depid': depid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/universities/{unid}/departments/{depid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
