/**
 * kucukdevapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import Message from '../model/Message';
import UniversityAPILessonModel from '../model/UniversityAPILessonModel';
import UniversityLessonModel from '../model/UniversityLessonModel';

/**
* UniversityLessons service.
* @module api/UniversityLessonsApi
* @version 1.0.0
*/
export default class UniversityLessonsApi {

    /**
    * Constructs a new UniversityLessonsApi. 
    * @alias module:api/UniversityLessonsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUniversityLesson operation.
     * @callback module:api/UniversityLessonsApi~createUniversityLessonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create University Lesson
     * Create a lesson for a semester of a university with given universityID and universitySemesterID
     * @param {String} unid 
     * @param {String} unisid 
     * @param {module:model/UniversityLessonModel} universityLessonModel 
     * @param {module:api/UniversityLessonsApi~createUniversityLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    createUniversityLesson(unid, unisid, universityLessonModel, callback) {
      let postBody = universityLessonModel;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling createUniversityLesson");
      }
      // verify the required parameter 'unisid' is set
      if (unisid === undefined || unisid === null) {
        throw new Error("Missing the required parameter 'unisid' when calling createUniversityLesson");
      }
      // verify the required parameter 'universityLessonModel' is set
      if (universityLessonModel === undefined || universityLessonModel === null) {
        throw new Error("Missing the required parameter 'universityLessonModel' when calling createUniversityLesson");
      }

      let pathParams = {
        'unid': unid,
        'unisid': unisid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/universities/{unid}/semesters/{unisid}/lessons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUniversityLesson operation.
     * @callback module:api/UniversityLessonsApi~deleteUniversityLessonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete University Lesson
     * Delete a university lesson with given universityID, universitySemesterID and universityLessonID
     * @param {String} unid 
     * @param {String} unisid 
     * @param {String} unilid 
     * @param {module:api/UniversityLessonsApi~deleteUniversityLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    deleteUniversityLesson(unid, unisid, unilid, callback) {
      let postBody = null;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling deleteUniversityLesson");
      }
      // verify the required parameter 'unisid' is set
      if (unisid === undefined || unisid === null) {
        throw new Error("Missing the required parameter 'unisid' when calling deleteUniversityLesson");
      }
      // verify the required parameter 'unilid' is set
      if (unilid === undefined || unilid === null) {
        throw new Error("Missing the required parameter 'unilid' when calling deleteUniversityLesson");
      }

      let pathParams = {
        'unid': unid,
        'unisid': unisid,
        'unilid': unilid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/universities/{unid}/semesters/{unisid}/lessons/{unilid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSingleLessonWithCode operation.
     * @callback module:api/UniversityLessonsApi~getSingleLessonWithCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UniversityAPILessonModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Lesson With Code
     * Get a single lesson of a university semester with given universityID and Lesson Code
     * @param {String} unid 
     * @param {String} code 
     * @param {module:api/UniversityLessonsApi~getSingleLessonWithCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UniversityAPILessonModel}
     */
    getSingleLessonWithCode(unid, code, callback) {
      let postBody = null;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling getSingleLessonWithCode");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getSingleLessonWithCode");
      }

      let pathParams = {
        'unid': unid
      };
      let queryParams = {
        'code': code
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UniversityAPILessonModel;
      return this.apiClient.callApi(
        '/universities/{unid}/semesters/current-semester/lessons/find-code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSingleUniversitySemesterLesson operation.
     * @callback module:api/UniversityLessonsApi~getSingleUniversitySemesterLessonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UniversityAPILessonModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show University Lesson
     * Get a single lesson of a university semester with given universityID, universitySemesterID and universityLessonID
     * @param {String} unid 
     * @param {String} unisid 
     * @param {String} unilid 
     * @param {module:api/UniversityLessonsApi~getSingleUniversitySemesterLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UniversityAPILessonModel}
     */
    getSingleUniversitySemesterLesson(unid, unisid, unilid, callback) {
      let postBody = null;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling getSingleUniversitySemesterLesson");
      }
      // verify the required parameter 'unisid' is set
      if (unisid === undefined || unisid === null) {
        throw new Error("Missing the required parameter 'unisid' when calling getSingleUniversitySemesterLesson");
      }
      // verify the required parameter 'unilid' is set
      if (unilid === undefined || unilid === null) {
        throw new Error("Missing the required parameter 'unilid' when calling getSingleUniversitySemesterLesson");
      }

      let pathParams = {
        'unid': unid,
        'unisid': unisid,
        'unilid': unilid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UniversityAPILessonModel;
      return this.apiClient.callApi(
        '/universities/{unid}/semesters/{unisid}/lessons/{unilid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUniversitySemesterLessons operation.
     * @callback module:api/UniversityLessonsApi~listUniversitySemesterLessonsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniversityAPILessonModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List University Lessons
     * list all lessons for a semesters of a university with given universityID and universitySemesterID
     * @param {String} unid 
     * @param {String} unisid 
     * @param {module:api/UniversityLessonsApi~listUniversitySemesterLessonsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniversityAPILessonModel>}
     */
    listUniversitySemesterLessons(unid, unisid, callback) {
      let postBody = null;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling listUniversitySemesterLessons");
      }
      // verify the required parameter 'unisid' is set
      if (unisid === undefined || unisid === null) {
        throw new Error("Missing the required parameter 'unisid' when calling listUniversitySemesterLessons");
      }

      let pathParams = {
        'unid': unid,
        'unisid': unisid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UniversityAPILessonModel];
      return this.apiClient.callApi(
        '/universities/{unid}/semesters/{unisid}/lessons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUniversityLesson operation.
     * @callback module:api/UniversityLessonsApi~updateUniversityLessonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update University Lesson
     * Update lesson of a university semester with given universityID, universitySemesterID and universityLessonID
     * @param {String} unid 
     * @param {String} unisid 
     * @param {String} unilid 
     * @param {module:model/UniversityAPILessonModel} universityAPILessonModel 
     * @param {module:api/UniversityLessonsApi~updateUniversityLessonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    updateUniversityLesson(unid, unisid, unilid, universityAPILessonModel, callback) {
      let postBody = universityAPILessonModel;
      // verify the required parameter 'unid' is set
      if (unid === undefined || unid === null) {
        throw new Error("Missing the required parameter 'unid' when calling updateUniversityLesson");
      }
      // verify the required parameter 'unisid' is set
      if (unisid === undefined || unisid === null) {
        throw new Error("Missing the required parameter 'unisid' when calling updateUniversityLesson");
      }
      // verify the required parameter 'unilid' is set
      if (unilid === undefined || unilid === null) {
        throw new Error("Missing the required parameter 'unilid' when calling updateUniversityLesson");
      }
      // verify the required parameter 'universityAPILessonModel' is set
      if (universityAPILessonModel === undefined || universityAPILessonModel === null) {
        throw new Error("Missing the required parameter 'universityAPILessonModel' when calling updateUniversityLesson");
      }

      let pathParams = {
        'unid': unid,
        'unisid': unisid,
        'unilid': unilid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/universities/{unid}/semesters/{unisid}/lessons/{unilid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
